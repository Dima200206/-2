{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dima200206/-2/blob/main/%D0%9B%D0%90%D0%91%D0%9E%D0%A0%D0%90%D0%A2%D0%9E%D0%A0%D0%9D%D0%90%20%D0%A0%D0%9E%D0%91%D0%9E%D0%A2%D0%90%203%20%D0%9A%D0%A1%D0%92%D0%94%204%20%D0%BA%D1%83%D1%80%D1%81\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ЛАБОРАТОРНА РОБОТА 3 КСВД 4 курс\n",
        "\n",
        "Побудувати логістичну регресію за допомогою нейронної мережі з використанням бібліотеки Pytorch\n",
        "1. Завантажити датасет «Вилікувати принцесу»\n",
        "https://www.kaggle.com/datasets/unmoved/cure-the-princess?select=data.csv\n",
        "2. Провести аналіз і підготовку даних.\n",
        "3. Поділити датасет на навчальну і тестову вибірки, масштабувати ознаки.\n",
        "4. Сформувати тензори.\n",
        "5. Побудувати нейронну мережу.\n",
        "6. Навчити.\n",
        "7. Вивести точність і функцію втрат.\n",
        "\n",
        "8. Побудувати логістичну регресію за допомогою методів МН.\n",
        "9. Оцінити метрики.\n",
        "\n",
        "10. Вивести клас. Звіт, матрицю плутанини.\n",
        "11. Порівняти результати.\n",
        "12. Написати Висновки.\n",
        "13. Дз здаємо у вигляді колаб і посилання на гітхаб.\n"
      ],
      "metadata": {
        "id": "h5_hwzEyuKC_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader, TensorDataset\n"
      ],
      "metadata": {
        "id": "uPUlwNnryF4_"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()  # Завантажте файл data.csv вручну\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "w2vB9Hn1yG5W",
        "outputId": "b81fa47f-c466-4133-88e5-73c491ebe02a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-13bab7c6-76db-4214-9819-a2d12053b807\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-13bab7c6-76db-4214-9819-a2d12053b807\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving data.csv to data (2).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"data.csv\")\n",
        "print(df.head())\n",
        "print(df.info())\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Аналіз цільової змінної\n",
        "sns.countplot(data=df, x='Cured')\n",
        "plt.title(\"Розподіл цільової змінної\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0vVdBzdn0aD9",
        "outputId": "356b6222-9744-4a4d-b710-d52f5ca8e4df"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Phoenix Feather  Unicorn Horn  Dragon's Blood  Mermaid Tears  Fairy Dust  \\\n",
            "0              2.4          18.7            18.4           27.9         7.9   \n",
            "1              2.1           6.0            15.0           13.3        15.6   \n",
            "2             17.2          13.9            23.8            6.8        10.7   \n",
            "3              8.4           9.7             6.8           26.9         4.6   \n",
            "4             22.1          10.8            16.4           10.5        22.0   \n",
            "\n",
            "   Goblin Toes  Witch's Brew  Griffin Claw  Troll Hair  Kraken Ink  \\\n",
            "0          9.6          18.3          13.2         2.5        26.0   \n",
            "1         13.1          11.0           5.0         7.2        26.0   \n",
            "2         15.8          19.4           2.7        15.4        21.2   \n",
            "3         29.1          14.6          19.7        18.0        20.8   \n",
            "4         23.4           2.6          18.2        23.8        11.3   \n",
            "\n",
            "   Minotaur Horn  Basilisk Scale  Chimera Fang  Cured  \n",
            "0           10.5            26.2          12.5      0  \n",
            "1            1.5            13.3           6.2      0  \n",
            "2           11.1            16.6          11.4      1  \n",
            "3           13.6            13.9           8.1      1  \n",
            "4            5.5            16.8          16.2      0  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2338 entries, 0 to 2337\n",
            "Data columns (total 14 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   Phoenix Feather  2338 non-null   float64\n",
            " 1   Unicorn Horn     2338 non-null   float64\n",
            " 2   Dragon's Blood   2338 non-null   float64\n",
            " 3   Mermaid Tears    2338 non-null   float64\n",
            " 4   Fairy Dust       2338 non-null   float64\n",
            " 5   Goblin Toes      2338 non-null   float64\n",
            " 6   Witch's Brew     2338 non-null   float64\n",
            " 7   Griffin Claw     2338 non-null   float64\n",
            " 8   Troll Hair       2338 non-null   float64\n",
            " 9   Kraken Ink       2338 non-null   float64\n",
            " 10  Minotaur Horn    2338 non-null   float64\n",
            " 11  Basilisk Scale   2338 non-null   float64\n",
            " 12  Chimera Fang     2338 non-null   float64\n",
            " 13  Cured            2338 non-null   int64  \n",
            "dtypes: float64(13), int64(1)\n",
            "memory usage: 255.8 KB\n",
            "None\n",
            "Phoenix Feather    0\n",
            "Unicorn Horn       0\n",
            "Dragon's Blood     0\n",
            "Mermaid Tears      0\n",
            "Fairy Dust         0\n",
            "Goblin Toes        0\n",
            "Witch's Brew       0\n",
            "Griffin Claw       0\n",
            "Troll Hair         0\n",
            "Kraken Ink         0\n",
            "Minotaur Horn      0\n",
            "Basilisk Scale     0\n",
            "Chimera Fang       0\n",
            "Cured              0\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " X = df.drop('Cured', axis=1)\n",
        " y = df['Cured']\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X_scaled, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "S2qTQC_vyNgR"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n",
        "y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)\n",
        "\n",
        "X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n",
        "y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)\n",
        "\n",
        "train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n"
      ],
      "metadata": {
        "id": "O5f681YEyNd9"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LogisticRegressionModel(nn.Module):\n",
        "    def __init__(self, input_dim):\n",
        "        super(LogisticRegressionModel, self).__init__()\n",
        "        self.linear = nn.Linear(input_dim, 1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        return torch.sigmoid(self.linear(x))\n",
        "\n",
        "model = LogisticRegressionModel(X_train.shape[1])\n",
        "criterion = nn.BCELoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.01)\n"
      ],
      "metadata": {
        "id": "kd2BRbhcyNbf"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 100\n",
        "for epoch in range(epochs):\n",
        "    for inputs, labels in train_loader:\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    if (epoch+1) % 10 == 0:\n",
        "        print(f\"Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Z2DW-3zyNYn",
        "outputId": "acaf37ce-30ec-498f-8f83-0c76a92f9d2f"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10/100], Loss: 0.3834\n",
            "Epoch [20/100], Loss: 0.2766\n",
            "Epoch [30/100], Loss: 0.1067\n",
            "Epoch [40/100], Loss: 0.1016\n",
            "Epoch [50/100], Loss: 0.3777\n",
            "Epoch [60/100], Loss: 0.3275\n",
            "Epoch [70/100], Loss: 0.1684\n",
            "Epoch [80/100], Loss: 0.3667\n",
            "Epoch [90/100], Loss: 0.1454\n",
            "Epoch [100/100], Loss: 0.1912\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with torch.no_grad():\n",
        "    y_pred = model(X_test_tensor)\n",
        "    y_pred_class = (y_pred > 0.5).float()\n",
        "\n",
        "accuracy = accuracy_score(y_test_tensor, y_pred_class)\n",
        "loss_value = criterion(y_pred, y_test_tensor).item()\n",
        "\n",
        "print(f\"🔹 Точність моделі (PyTorch): {accuracy:.4f}\")\n",
        "print(f\"🔹 Функція втрат (PyTorch): {loss_value:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3GoATFOWyNV_",
        "outputId": "87243dff-1260-4f31-c15a-1dcb58613bb0"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Точність моделі (PyTorch): 0.8953\n",
            "🔹 Функція втрат (PyTorch): 0.2974\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lr_model = LogisticRegression()\n",
        "lr_model.fit(X_train, y_train)\n",
        "\n",
        "y_pred_sklearn = lr_model.predict(X_test)\n",
        "\n",
        "accuracy_sklearn = accuracy_score(y_test, y_pred_sklearn)\n",
        "print(f\"🔹 Точність логістичної регресії (sklearn): {accuracy_sklearn:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hEI0mJTHyNTP",
        "outputId": "e54736d1-92ea-4e93-a8c7-eeaa38883d31"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Точність логістичної регресії (sklearn): 0.8932\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n📋 Classification Report (PyTorch):\")\n",
        "print(classification_report(y_test_tensor, y_pred_class))\n",
        "\n",
        "print(\"\\n📋 Classification Report (sklearn):\")\n",
        "print(classification_report(y_test, y_pred_sklearn))\n",
        "\n",
        "print(\"\\n🔻 Матриця плутанини (PyTorch):\")\n",
        "print(confusion_matrix(y_test_tensor, y_pred_class))\n",
        "\n",
        "print(\"\\n🔻 Матриця плутанини (sklearn):\")\n",
        "print(confusion_matrix(y_test, y_pred_sklearn))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3UJH0RU9yViT",
        "outputId": "17c7265d-f2f7-4472-f683-e6d731e06a64"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📋 Classification Report (PyTorch):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0       0.89      0.90      0.89       231\n",
            "         1.0       0.90      0.89      0.90       237\n",
            "\n",
            "    accuracy                           0.90       468\n",
            "   macro avg       0.90      0.90      0.90       468\n",
            "weighted avg       0.90      0.90      0.90       468\n",
            "\n",
            "\n",
            "📋 Classification Report (sklearn):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.90      0.89       231\n",
            "           1       0.90      0.89      0.89       237\n",
            "\n",
            "    accuracy                           0.89       468\n",
            "   macro avg       0.89      0.89      0.89       468\n",
            "weighted avg       0.89      0.89      0.89       468\n",
            "\n",
            "\n",
            "🔻 Матриця плутанини (PyTorch):\n",
            "[[207  24]\n",
            " [ 25 212]]\n",
            "\n",
            "🔻 Матриця плутанини (sklearn):\n",
            "[[207  24]\n",
            " [ 26 211]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"\"\"\n",
        "✅ Порівняння моделей:\n",
        "\n",
        "- Точність PyTorch:     {accuracy:.4f}\n",
        "- Точність Sklearn:     {accuracy_sklearn:.4f}\n",
        "\n",
        "PyTorch використовує нейронну мережу, але по суті це теж лінійна модель.\n",
        "Результати повинні бути дуже схожими, що підтверджує коректність реалізації.\n",
        "\"\"\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HuRsAnMWyVf3",
        "outputId": "c06a7296-f00c-4d31-c0aa-15db04841ea3"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Порівняння моделей:\n",
            "\n",
            "- Точність PyTorch:     0.8953\n",
            "- Точність Sklearn:     0.8932\n",
            "\n",
            "PyTorch використовує нейронну мережу, але по суті це теж лінійна модель. \n",
            "Результати повинні бути дуже схожими, що підтверджує коректність реалізації.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Загальний висновок:\n",
        "\n",
        "Модель нейронної мережі для задачі логістичної регресії виявилася ефективною для класифікації даних. Вона показала високі результати в оцінках точності та матриці плутанини, що підтверджує правильність обраної архітектури та параметрів навчання. Водночас, порівняння з іншими моделями може дати більше інформації щодо її переваг або обмежень.\n",
        "\n",
        "Завдяки використанню PyTorch для побудови моделі, ми змогли ефективно реалізувати навчання, налаштування та тестування нейронної мережі для класифікаційних задач."
      ],
      "metadata": {
        "id": "jWLhqkGG2lx8"
      }
    }
  ]
}